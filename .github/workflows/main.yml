name: build

on:
  workflow_dispatch:
    inputs:
      ffmpeg_version:
        description: "Optional jellyfin-ffmpeg version (e.g. 7.1.1-7)"
        required: false
        type: string

  push:
    branches:
      - master
    paths-ignore:
      - "**.md"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: arabcoders/jellyfin-ffmpeg

jobs:
  build:
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch')
    env:
      FFMPEG_ARG: ${{ github.event.inputs.ffmpeg_version != '' && format('JELLYFIN_FFMPEG_VERSION={0}', github.event.inputs.ffmpeg_version) || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    permissions:
      packages: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push image content by digest (one arch per job)
      - name: Build and push
        id: buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true
          build-args: ${{ env.FFMPEG_ARG }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ matrix.platform }}
          cache-to: type=gha,scope=${{ github.workflow }}-${{ matrix.platform }}

      - name: Export digest
        run: |
          set -euo pipefail
          mkdir -p /tmp/digests
          digest="${{ steps.buildx.outputs.digest }}"
          # sanitize platform for filename
          platform='${{ matrix.platform }}'
          safe_platform="${platform//\//-}"
          echo "$digest" > "/tmp/digests/${safe_platform}"

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform == 'linux/amd64' && 'digests-linux-amd64' || 'digests-linux-arm64' }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Publish manifests
    needs: build
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      packages: write
      contents: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          merge-multiple: true
          path: /tmp/digests

      - name: Docker meta (tags for manifests)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=branch
            type=raw,value=${{ github.event.inputs.ffmpeg_version }},enable=${{ github.event.inputs.ffmpeg_version != '' }}
          flavor: |
            latest=false

      - name: Create arch-specific tags
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          set -euo pipefail
          amd64_digest=$(cat /tmp/digests/linux-amd64)
          arm64_digest=$(cat /tmp/digests/linux-arm64)
          echo "Creating arch tags for:"
          echo "$TAGS"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            image_no_tag=${tag%:*}
            tag_name=${tag##*:}
            echo "Tagging ${image_no_tag}:${tag_name}-amd64 -> $amd64_digest"
            docker buildx imagetools create \
              -t "${image_no_tag}:${tag_name}-amd64" \
              "${image_no_tag}@${amd64_digest}"
            echo "Tagging ${image_no_tag}:${tag_name}-arm64 -> $arm64_digest"
            docker buildx imagetools create \
              -t "${image_no_tag}:${tag_name}-arm64" \
              "${image_no_tag}@${arm64_digest}"
          done <<< "$TAGS"

      - name: Create and push multi-arch manifests
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          set -euo pipefail
          amd64_digest=$(cat /tmp/digests/linux-amd64)
          arm64_digest=$(cat /tmp/digests/linux-arm64)
          echo "Assembling manifests for tags:"
          echo "$TAGS"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            image_no_tag=${tag%:*}
            echo "Creating manifest: $tag"
            docker buildx imagetools create \
              -t "$tag" \
              "${image_no_tag}@$amd64_digest" \
              "${image_no_tag}@$arm64_digest"
          done <<< "$TAGS"
